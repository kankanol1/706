
DOM知识汇总

    js：javascript
        ECMAScript ==>ES5 ES6
            JS核心解析器 翻译官
            规定了一些基本的方法、函数
        DOM：document object model 文本对象文档
            通过 document 提供的一些属性和方法赋予开发者操作网页的能力
            API：apply program interface 应用程序接口
                ==>属性和方法
        BOM：browser object model 浏览器对象模型
            通过 window  提供的一些属性和方法，操作浏览器

知识点：ele.style.cssText = "width:200px;height:200px";
        box-sizing：border-box 规定两个并排的带边框的框
            content-box：
                padding和border不被包含在定义的width和height之内。
                对象的实际宽度等于设置的width值和border、padding之和，
                即 ( Element width = width + border + padding )
                此属性表现为标准模式下的盒模型。
            border-box：
                padding和border被包含在定义的width和height之内。
                对象的实际宽度就等于设置的width值，即使定义有
                border和padding也不会改变对象的实际宽度，即
                ( Element width = width )
                此属性表现为怪异模式下的盒模型。

DOM节点：

       一般分为三大关系：
               父级关系    只有一层上下结构的关系 从下往上找
               子级关系    只有一层上下结构的关系 从上往下找
               兄弟关系    共同拥有同一个父级的元素集合

               祖先节点    从当前向上的所有DOM节点统称为祖先节点
               父子节点
               兄弟节点
               子孙节点    前节点下面的所有节点的统称

               找父级：
                       ele.parentNode   ele.parentElement
                       可以找多次 直到找到null
                       ele <== body <== html <== document <== null
               找子级：
                       children：找到所有的子元素
                       firstElementChild: 第一个子元素
                       lastElementChild: 最后一个子元素
               找兄弟：
                       nextElementSibling：找到下一个兄弟节点
                       previousElementSibling：找到上一个兄弟节点

节点类型：

       旧知识：typeof
       新知识：nodeType
       元素节点：数字1
               childNodes：返回所有的子节点 类数组（伪数组）
       文本节点：数字3
               空格、换行、文字等内容都属于文本节点
       注释节点：数字8
               <!--我是注释节点-->
       属性节点：数字2
               attribute 类数组（伪数组）
               nodeName：属性节点的名称
               nodeValue：属性节点的值
       文件节点：数字9
               document

知识点：
        去除双边框 border-collapse:collapse

        css选择器权重：
                ！important NAN
                行内样式    1000
                ID选择器    100
                class选择器 10
                标签选择器  1

        offsetParent:找到距离最近的有定位的祖先元素
                    如果没有定位的父级则一直找到body
                    ele.offsetParent 不一定是ele的父级
        offsetLeft: 当前元素的外边框到定位父级的内边框之间的距离
        offsetTop、offsetLeft、offsetWidth、offsetHeight(自身宽度)

        while：循环非常适合于不知道具体循环次数的工作

        getBoundingClientRect():获取元素的信息
                高版本浏览器：top bottom left right width height
                alert(box.getBoundingClientRect().top);         // 元素上边距离页面上边的距离
                alert(box.getBoundingClientRect().right);       // 元素右边距离页面左边的距离
                alert(box.getBoundingClientRect().bottom);      // 元素下边距离页面上边的距离
                alert(box.getBoundingClientRect().left);        // 元素左边距离页面左边的距离

        Attributes:获取一个属性作为对象
                getAttribute("key") 获取元素的行内属性
                        不属于document对象 所以不能通过document对象获取 只能通过元素节点调用
                        必须写在元素身上才可以找见       // console.log( oDiv.getAttribute('class') );
               1、 setAttribute("key","value") 设置元素的标签属性
               2、createAttribute：仅建立一个属性
               3、removeAttribute：删除一个属性
               4、getAttributeNode：获取一个节点作为对象
               5、setAttributeNode：建立一个属性节点 标签内的节点
               6、removeAttributeNode：删除一个属性节点 标签内的节点

        document.documentElement.clientWidth   可视区域的宽度
        document.documentElement.clientHeight  可视区域的高度


元素操作

        document.createElement("元素标签")：
        父级.appendChild(要添加的子元素)：向父级“末尾”添加一个子元素
        父级.insertBefore(要添加的元素,已有的元素)：在指定元素之前添加一个元素
        removeChild(要移除的元素)：
                 1、如果父级当中已经没有要移除的元素了，那么就会报错
                 2、添加判断进行解决
        父级.replaceChild(替换元素,被替换的元素):实现子节点（对象）的替换
                1. 当 oldnode 被替换时，所有与之相关的属性内容都将被移除。
                2. newnode 必须先被建立。
        元素.cloneNode():克隆元素本身 不会克隆该元素下的子元素
        元素.cloneNode(true)：克隆元素下的子元素（默认false）不会克隆事件


/*****************************************************清除浮动********************************************************/
清除浮动
        常识：
                1、普通流：很多人或者文章称之为文档流或者普通文档流，其实标准里
                    根本就没有这个词。如果把文档流直译为英文就是 document flow ，
                    但标准里只有另一个词，叫做普通流 （normal flow)，或者称之为常
                    规流。但似乎大家更习惯文档流的称呼，因为很多中文翻译的书就是
                    这么来的。比如《CSS Mastery》，英文原书中至始至终都只有普通流
                    normal flow（普通流） 这一词，从来没出现过document flow （文档流）。
                2、浮动：浮动的框可以左右移动，直至它的外边缘遇到包含框或者另一个
                    浮动框的边缘。浮动框不属于文档中的普通流，当一个元素浮动之后，
                    不会影响到块级框的布局而只会影响内联框（通常是文本）的排列，文档
                    中的普通流就会表现得和浮动框不存在一样，当浮动框高度超出包含框的时候，
                    也就会出现包含框不会自动伸高来闭合浮动元素（“高度塌陷”现象）。
                    顾名思义，就是漂浮于普通流之上，像浮云一样，但是只能左右浮动。



        目的：当一个父级元素的高度不写或为auto 时，而且这个父元素内又有浮动的子元素
              那么这个时候该父元素的高度将不会自动适应子元素的高度，也可以说高度是0px
        布局错位问题：因为浮动元素脱离了标准文档流，因此其他非浮动元素可能会受此影响而错位
        解决：
            1. float
            　　缺点：层层往上找，没完没了，到了body那，算是个头  float 和 margin:0 auto; 有冲突
            2. display:inline-block;
            　　缺点：不能设置 margin:0 auto;
            3. overflow:hidden;父级定义
            　　缺点：很多JS交互特效做不了，多出去的部分隐藏了
            4. 在父级内，加空DIV：clear:both;
            　　缺点：父级不能加padding，否则IE6 IE7不兼容
            5. <br clear="all" />
            　　缺点：每次都要加这个换行符
            6. .clear:after { content: '.'; clear: both; display: block;height: 0;visibility: hidden; }
            　　缺点：如果代码多了点，也叫缺点的话……
            　　此外，如果父级没有宽，就必须为父级加上：zoom:1;用来解决IE6 IE7下的问题

            1、使用 br标签和其自身的 html属性
                  这个方法有些小众，br 有 clear=“all | left | right | none” 属性
                  <div class="warp" id="float2">
                  <h2>2）使用 br标签和其自身的 html属性</h2>
                  <div class="main left">.main{float:left;}</div>
                  <div class="side left">.side{float:right;}</div>
                  <br clear="all" />
                  </div>
                  <div class="footer">.footer</div>
                  优点：比空标签方式语义稍强，代码量较少
                  缺点：同样有违结构与表现的分离，不推荐使用
            2、父元素设置 overflow：hidden
                  通过设置父元素overflow值设置为hidden；在IE6中还需要触发 hasLayout ，例如 zoom：1；
                  <div class="warp" id="float3" style="overflow:hidden; *zoom:1;">
                  <h2>3)父元素设置 overflow </h2>
                  <div class="main left">.main{float:left;}</div>
                  <div class="side left">.side{float:right;}</div>
                  </div>
                  <div class="footer">.footer</div>
                  复制代码
                  优点：不存在结构和语义化问题，代码量极少
                  缺点：内容增多时候容易造成不会自动换行导致内容被隐藏掉，
                        无法显示需要溢出的元素；04年POPO就发现overflow:hidden
                        会导致中键失效，这是我作为一个多标签浏览控所不能接受的。
                        所以还是不要使用了
            3、父元素设置 overflow：auto 属性
                  同样IE6需要触发hasLayout，演示和3差不多
                  优点：不存在结构和语义化问题，代码量极少
                  缺点：多个嵌套后，firefox某些情况会造成内容全选；
                        IE中 mouseover 造成宽度改变时会出现最外层模块有滚动条等，
                        firefox早期版本会无故产生focus等, 请看 嗷嗷的 Demo ,不要使用
            4、父元素也设置浮动
                  优点：不存在结构和语义化问题，代码量极少
                  缺点：使得与父元素相邻的元素的布局会受到影响，
                        不可能一直浮动到body，不推荐使用
            5、使用:after 伪元素
                  需要注意的是 :after是伪元素（Pseudo-Element），
                  不是伪类（某些CSS手册里面称之为“伪对象”），
                  很多清除浮动大全之类的文章都称之为伪类，
                  不过css要严谨一点，这是一种态度。
                  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。

那么如何触发BFC呢？
            float 除了none以外的值
            overflow 除了visible 以外的值（hidden，auto，scroll ）
            display (table-cell，table-caption，inline-block)
            position（absolute，fixed）
            field set元素

BFC的特性：
        1)块级格式化上下文会阻止外边距叠加当两个相邻的块框在同一个块级格式化上下文中时，
            它们之间垂直方向的外边距会发生叠加。
            换句话说，如果这两个相邻的块框不属于同一个块级格式化上下文，
            那么它们的外边距就不会叠加。
        2)块级格式化上下文不会重叠浮动元素根据规定，
            一个块级格式化上下文的边框不能和它里面的元素的外边距重叠。
            这就意味着浏览器将会给块级格式化上下文创建隐式的外边距来阻止它和浮动元素的外边距叠加。
            由于这个原因，当给一个挨着浮动的块级格式化上下文添加负的外边距时将会不起作用
            （Webkit和IE6在这点上有一个问题——可以看这个测试用例）。
        3)块级格式化上下文通常可以包含浮动详见：
            W3C CSS2.1 - 10.6.7 'Auto' heights for block formatting context roots
            通俗地来说：创建了 BFC的元素就是一个独立的盒子，
            里面的子元素不会在布局上影响外面的元素，反之亦然，
            同时BFC任然属于文档中的普通流。

/**************************************************清除浮动精益求精方法***********************************************/
        1、 .clearfix:after {content:".";display:block;visibility:hidden;height:0;clear:both; }
            .clearfix { *zoom:1; }
            通过查询发现Unicode字符里有一个“零宽度空格”，也就是U+200B，
            这个字符本身是不可见的，所以我们完全可以省略掉 visibility:hidden了
            .clearfix:after {content:".";display:block;height:0;clear:b
            .clearfix { *zoom:1; }
        2、 由Nicolas Gallagher 大湿提出来的,原文:A new micro clearfix hack，该方法也不存在firefox中空隙的问题。
           /* For modern browsers */
           .cf:before,.cf:after {
           content:"";
           display:table;
           }
           .cf:after { clear:both; }/* For IE 6/7 (trigger hasLayout) */
           .cf { zoom:1; }



